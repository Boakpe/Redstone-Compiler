grammar Redstone;

declaração: TIPO (OPENBRACKETS CLOSEBRACKETS)? ID FF;
valor: NUMINT | ID | NUMREAL | STR | BOOLEAN | ID OPENPAR ID (COMMA ID)* CLOSEPAR | OPENBRACES ID (COMMA ID)* CLOSEBRACES;
expressão_aritmética: valor (OPAR valor)*;
expressão_relacional: valor OPREL valor;
expressão_genérica: (valor|expressão_aritmética|expressão_relacional) (OPLOG (valor|expressão_aritmética|expressão_relacional))*;
atribuição: (declaração | ID )? ATR expressão_genérica FF;
corpo_função: (declaração)* (atribuição)* (valor)* RETURN valor FF;
assinatura_função: FUNCTION ID OPENPAR TIPO ID (COMMA TIPO ID)* CLOSEPAR OPENBRACES corpo_função CLOSEBRACES;
condição: IF OPENPAR expressão_relacional OPENPAR corpo_função CLOSEPAR (ELSE OPENBRACES corpo_função CLOSEBRACES)?;
loop: WHILE OPENPAR expressão_relacional CLOSEPAR OPENBRACES corpo_função CLOSEBRACES;
escrita: WRITE OPENPAR expressão_genérica CLOSEPAR FF;
leitura: READ OPENPAR ID CLOSEPAR FF;
comentário: COMMENT;
comando: (declaração | atribuição | assinatura_função | condição | loop | escrita | leitura | comentário);
programa: (comando)* EOF;

TIPO: 'INT' | 'REAL' | 'STR' | 'BOOL';
ATR: '<-';
OPAR: '+' | '-' | '*' | '/';
OPREL: '=' | '!=' | '<' | '>' | '<=' | '>=';
OPLOG: '&&' | '||';
OPENPAR: '(';
CLOSEPAR: ')';
ID: [_a-z][_a-z0-9]*;
FF: ';';
NUMINT: [0-9]+;
NUMREAL: [0-9]+'.'[0-9]+;
WS: [ \t\r\n]+ -> skip;
READ: 'READ';
WRITE: 'WRITE';
IF: 'IF';
ELSE: 'ELSE';
WHILE: 'WHILE';
BOOLEAN: 'TRUE' | 'FALSE';
STR: '"' .*? '"';
FUNCTION: 'FUNC';
OPENBRACES: '{';
CLOSEBRACES: '}';
OPENBRACKETS: '[';
CLOSEBRACKETS: ']';
RETURN: 'RETURN';
COMMA: ',';
COMMENT: '//' .*? '\n' -> skip;
ERROR: . ;
