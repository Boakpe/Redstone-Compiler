grammar Redstone;

declaração: TIPO ID FF;
variavel: ID | ID OPENBRACKETS expressão_mais_genérica CLOSEBRACKETS;
valor: NUMINT | variavel | NUMREAL | STR | BOOLEAN | ID OPENPAR expressão_mais_genérica (COMMA expressão_mais_genérica)* CLOSEPAR | OPENBRACES ID (COMMA ID)* CLOSEBRACES;
expressão_aritmética: valor (OPAR expressão_aritmética)*;
expressão_arimética_mais_genérica: expressão_aritmética(OPAR expressão_aritmética)* | OPENPAR expressão_arimética_mais_genérica CLOSEPAR(OPAR expressão_arimética_mais_genérica)*;
expressão_relacional: valor OPREL expressão_mais_genérica;
expressão_relacional_mais_genérica: expressão_relacional | OPENPAR expressão_relacional_mais_genérica CLOSEPAR;
expressão_genérica: (valor|expressão_arimética_mais_genérica|expressão_relacional_mais_genérica) (OPLOG (valor|expressão_arimética_mais_genérica|expressão_relacional_mais_genérica))* ;
expressão_mais_genérica: expressão_genérica | OPENPAR expressão_mais_genérica CLOSEPAR ;
atribuição: variavel ATR expressão_mais_genérica FF;
corpo_função: ((declaração) | (atribuição) | (condição) | (loop) | (escrita) | (leitura) | (comentário) | (RETURN expressão_mais_genérica FF))*;
assinatura_função: FUNCTION ID OPENPAR (TIPO ID (COMMA TIPO ID)*)? CLOSEPAR OPENBRACES corpo_função CLOSEBRACES;
condição: IF OPENPAR expressão_relacional_mais_genérica CLOSEPAR OPENBRACES corpo_função CLOSEBRACES (ELSE OPENBRACES corpo_função CLOSEBRACES)?;
loop: WHILE OPENPAR expressão_relacional_mais_genérica CLOSEPAR OPENBRACES corpo_função CLOSEBRACES;
escrita: WRITE OPENPAR expressão_mais_genérica CLOSEPAR FF;
leitura: READ OPENPAR variavel CLOSEPAR FF;
comentário: COMMENT;
comando: (declaração | atribuição | assinatura_função | condição | loop | escrita | leitura | comentário);
programa: (comando)* EOF;

TIPO: 'INT' | 'REAL' | 'STR' | 'BOOL' | 'INT[]' | 'REAL[]' | 'STR[]' | 'BOOL[]';
ATR: '<-';
OPAR: '+' | '-' | '*' | '/';
OPREL: '=' | '!=' | '<' | '>' | '<=' | '>=';
OPLOG: '&&' | '||';
OPENPAR: '(';
CLOSEPAR: ')';
ID: [_a-z][_a-z0-9]*;
FF: ';';
NUMINT: [-]?[0-9]+;
NUMREAL: [-][0-9]+'.'[0-9]+;
WS: [ \t\r\n]+ -> skip;
READ: 'READ';
WRITE: 'WRITE';
IF: 'IF';
ELSE: 'ELSE';
WHILE: 'WHILE';
BOOLEAN: 'TRUE' | 'FALSE';
STR: '"' .*? '"';
FUNCTION: 'FUNC';
OPENBRACES: '{';
CLOSEBRACES: '}';
OPENBRACKETS: '[';
CLOSEBRACKETS: ']';
RETURN: 'RETURN';
COMMA: ',';
COMMENT: '//' .*? '\n' -> skip;
ERROR: . ;
