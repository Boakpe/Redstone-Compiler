# Generated from Redstone.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,212,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,3,0,72,8,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,3,3,87,8,3,1,4,1,4,1,4,1,4,3,4,93,8,4,1,5,1,5,1,6,1,6,1,
        7,1,7,5,7,101,8,7,10,7,12,7,104,9,7,1,8,1,8,1,9,4,9,109,8,9,11,9,
        12,9,110,1,10,4,10,114,8,10,11,10,12,10,115,1,10,1,10,4,10,120,8,
        10,11,10,12,10,121,1,11,4,11,125,8,11,11,11,12,11,126,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,165,8,17,1,18,1,18,
        5,18,169,8,18,10,18,12,18,172,9,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,5,26,202,8,26,10,26,
        12,26,205,9,26,1,26,1,26,1,26,1,26,1,27,1,27,2,170,203,0,28,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,1,0,6,3,0,42,43,45,45,47,47,2,0,60,60,62,62,2,
        0,95,95,97,122,3,0,48,57,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,
        32,227,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,71,1,0,0,0,3,73,1,0,0,
        0,5,76,1,0,0,0,7,86,1,0,0,0,9,92,1,0,0,0,11,94,1,0,0,0,13,96,1,0,
        0,0,15,98,1,0,0,0,17,105,1,0,0,0,19,108,1,0,0,0,21,113,1,0,0,0,23,
        124,1,0,0,0,25,130,1,0,0,0,27,135,1,0,0,0,29,141,1,0,0,0,31,144,
        1,0,0,0,33,149,1,0,0,0,35,164,1,0,0,0,37,166,1,0,0,0,39,175,1,0,
        0,0,41,180,1,0,0,0,43,182,1,0,0,0,45,184,1,0,0,0,47,186,1,0,0,0,
        49,188,1,0,0,0,51,195,1,0,0,0,53,197,1,0,0,0,55,210,1,0,0,0,57,58,
        5,73,0,0,58,59,5,78,0,0,59,72,5,84,0,0,60,61,5,82,0,0,61,62,5,69,
        0,0,62,63,5,65,0,0,63,72,5,76,0,0,64,65,5,83,0,0,65,66,5,84,0,0,
        66,72,5,82,0,0,67,68,5,66,0,0,68,69,5,79,0,0,69,70,5,79,0,0,70,72,
        5,76,0,0,71,57,1,0,0,0,71,60,1,0,0,0,71,64,1,0,0,0,71,67,1,0,0,0,
        72,2,1,0,0,0,73,74,5,60,0,0,74,75,5,45,0,0,75,4,1,0,0,0,76,77,7,
        0,0,0,77,6,1,0,0,0,78,87,5,61,0,0,79,80,5,33,0,0,80,87,5,61,0,0,
        81,87,7,1,0,0,82,83,5,60,0,0,83,87,5,61,0,0,84,85,5,62,0,0,85,87,
        5,61,0,0,86,78,1,0,0,0,86,79,1,0,0,0,86,81,1,0,0,0,86,82,1,0,0,0,
        86,84,1,0,0,0,87,8,1,0,0,0,88,89,5,38,0,0,89,93,5,38,0,0,90,91,5,
        124,0,0,91,93,5,124,0,0,92,88,1,0,0,0,92,90,1,0,0,0,93,10,1,0,0,
        0,94,95,5,40,0,0,95,12,1,0,0,0,96,97,5,41,0,0,97,14,1,0,0,0,98,102,
        7,2,0,0,99,101,7,3,0,0,100,99,1,0,0,0,101,104,1,0,0,0,102,100,1,
        0,0,0,102,103,1,0,0,0,103,16,1,0,0,0,104,102,1,0,0,0,105,106,5,59,
        0,0,106,18,1,0,0,0,107,109,7,4,0,0,108,107,1,0,0,0,109,110,1,0,0,
        0,110,108,1,0,0,0,110,111,1,0,0,0,111,20,1,0,0,0,112,114,7,4,0,0,
        113,112,1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,
        116,117,1,0,0,0,117,119,5,46,0,0,118,120,7,4,0,0,119,118,1,0,0,0,
        120,121,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,22,1,0,0,0,123,
        125,7,5,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,
        127,1,0,0,0,127,128,1,0,0,0,128,129,6,11,0,0,129,24,1,0,0,0,130,
        131,5,82,0,0,131,132,5,69,0,0,132,133,5,65,0,0,133,134,5,68,0,0,
        134,26,1,0,0,0,135,136,5,87,0,0,136,137,5,82,0,0,137,138,5,73,0,
        0,138,139,5,84,0,0,139,140,5,69,0,0,140,28,1,0,0,0,141,142,5,73,
        0,0,142,143,5,70,0,0,143,30,1,0,0,0,144,145,5,69,0,0,145,146,5,76,
        0,0,146,147,5,83,0,0,147,148,5,69,0,0,148,32,1,0,0,0,149,150,5,87,
        0,0,150,151,5,72,0,0,151,152,5,73,0,0,152,153,5,76,0,0,153,154,5,
        69,0,0,154,34,1,0,0,0,155,156,5,84,0,0,156,157,5,82,0,0,157,158,
        5,85,0,0,158,165,5,69,0,0,159,160,5,70,0,0,160,161,5,65,0,0,161,
        162,5,76,0,0,162,163,5,83,0,0,163,165,5,69,0,0,164,155,1,0,0,0,164,
        159,1,0,0,0,165,36,1,0,0,0,166,170,5,34,0,0,167,169,9,0,0,0,168,
        167,1,0,0,0,169,172,1,0,0,0,170,171,1,0,0,0,170,168,1,0,0,0,171,
        173,1,0,0,0,172,170,1,0,0,0,173,174,5,34,0,0,174,38,1,0,0,0,175,
        176,5,70,0,0,176,177,5,85,0,0,177,178,5,78,0,0,178,179,5,67,0,0,
        179,40,1,0,0,0,180,181,5,123,0,0,181,42,1,0,0,0,182,183,5,125,0,
        0,183,44,1,0,0,0,184,185,5,91,0,0,185,46,1,0,0,0,186,187,5,93,0,
        0,187,48,1,0,0,0,188,189,5,82,0,0,189,190,5,69,0,0,190,191,5,84,
        0,0,191,192,5,85,0,0,192,193,5,82,0,0,193,194,5,78,0,0,194,50,1,
        0,0,0,195,196,5,44,0,0,196,52,1,0,0,0,197,198,5,47,0,0,198,199,5,
        47,0,0,199,203,1,0,0,0,200,202,9,0,0,0,201,200,1,0,0,0,202,205,1,
        0,0,0,203,204,1,0,0,0,203,201,1,0,0,0,204,206,1,0,0,0,205,203,1,
        0,0,0,206,207,5,10,0,0,207,208,1,0,0,0,208,209,6,26,0,0,209,54,1,
        0,0,0,210,211,9,0,0,0,211,56,1,0,0,0,12,0,71,86,92,102,110,115,121,
        126,164,170,203,1,6,0,0
    ]

class RedstoneLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TIPO = 1
    ATR = 2
    OPAR = 3
    OPREL = 4
    OPLOG = 5
    OPENPAR = 6
    CLOSEPAR = 7
    ID = 8
    FF = 9
    NUMINT = 10
    NUMREAL = 11
    WS = 12
    READ = 13
    WRITE = 14
    IF = 15
    ELSE = 16
    WHILE = 17
    BOOLEAN = 18
    STR = 19
    FUNCTION = 20
    OPENBRACES = 21
    CLOSEBRACES = 22
    OPENBRACKETS = 23
    CLOSEBRACKETS = 24
    RETURN = 25
    COMMA = 26
    COMMENT = 27
    ERROR = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<-'", "'('", "')'", "';'", "'READ'", "'WRITE'", "'IF'", "'ELSE'", 
            "'WHILE'", "'FUNC'", "'{'", "'}'", "'['", "']'", "'RETURN'", 
            "','" ]

    symbolicNames = [ "<INVALID>",
            "TIPO", "ATR", "OPAR", "OPREL", "OPLOG", "OPENPAR", "CLOSEPAR", 
            "ID", "FF", "NUMINT", "NUMREAL", "WS", "READ", "WRITE", "IF", 
            "ELSE", "WHILE", "BOOLEAN", "STR", "FUNCTION", "OPENBRACES", 
            "CLOSEBRACES", "OPENBRACKETS", "CLOSEBRACKETS", "RETURN", "COMMA", 
            "COMMENT", "ERROR" ]

    ruleNames = [ "TIPO", "ATR", "OPAR", "OPREL", "OPLOG", "OPENPAR", "CLOSEPAR", 
                  "ID", "FF", "NUMINT", "NUMREAL", "WS", "READ", "WRITE", 
                  "IF", "ELSE", "WHILE", "BOOLEAN", "STR", "FUNCTION", "OPENBRACES", 
                  "CLOSEBRACES", "OPENBRACKETS", "CLOSEBRACKETS", "RETURN", 
                  "COMMA", "COMMENT", "ERROR" ]

    grammarFileName = "Redstone.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


