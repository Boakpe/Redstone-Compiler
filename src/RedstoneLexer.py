# Generated from Redstone.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,238,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,94,8,0,1,1,1,1,1,1,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,109,8,3,1,4,1,4,1,4,1,4,3,4,
        115,8,4,1,5,1,5,1,6,1,6,1,7,1,7,5,7,123,8,7,10,7,12,7,126,9,7,1,
        8,1,8,1,9,3,9,131,8,9,1,9,4,9,134,8,9,11,9,12,9,135,1,10,1,10,4,
        10,140,8,10,11,10,12,10,141,1,10,1,10,4,10,146,8,10,11,10,12,10,
        147,1,11,4,11,151,8,11,11,11,12,11,152,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,3,17,191,8,17,1,18,1,18,5,18,195,8,18,10,
        18,12,18,198,9,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
        21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
        25,1,25,1,26,1,26,1,26,1,26,5,26,228,8,26,10,26,12,26,231,9,26,1,
        26,1,26,1,26,1,26,1,27,1,27,2,196,229,0,28,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        1,0,7,3,0,42,43,45,45,47,47,2,0,60,60,62,62,2,0,95,95,97,122,3,0,
        48,57,95,95,97,122,1,0,45,45,1,0,48,57,3,0,9,10,13,13,32,32,258,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,93,1,0,0,0,3,95,1,0,0,0,5,98,
        1,0,0,0,7,108,1,0,0,0,9,114,1,0,0,0,11,116,1,0,0,0,13,118,1,0,0,
        0,15,120,1,0,0,0,17,127,1,0,0,0,19,130,1,0,0,0,21,137,1,0,0,0,23,
        150,1,0,0,0,25,156,1,0,0,0,27,161,1,0,0,0,29,167,1,0,0,0,31,170,
        1,0,0,0,33,175,1,0,0,0,35,190,1,0,0,0,37,192,1,0,0,0,39,201,1,0,
        0,0,41,206,1,0,0,0,43,208,1,0,0,0,45,210,1,0,0,0,47,212,1,0,0,0,
        49,214,1,0,0,0,51,221,1,0,0,0,53,223,1,0,0,0,55,236,1,0,0,0,57,58,
        5,73,0,0,58,59,5,78,0,0,59,94,5,84,0,0,60,61,5,82,0,0,61,62,5,69,
        0,0,62,63,5,65,0,0,63,94,5,76,0,0,64,65,5,83,0,0,65,66,5,84,0,0,
        66,94,5,82,0,0,67,68,5,66,0,0,68,69,5,79,0,0,69,70,5,79,0,0,70,94,
        5,76,0,0,71,72,5,73,0,0,72,73,5,78,0,0,73,74,5,84,0,0,74,75,5,91,
        0,0,75,94,5,93,0,0,76,77,5,82,0,0,77,78,5,69,0,0,78,79,5,65,0,0,
        79,80,5,76,0,0,80,81,5,91,0,0,81,94,5,93,0,0,82,83,5,83,0,0,83,84,
        5,84,0,0,84,85,5,82,0,0,85,86,5,91,0,0,86,94,5,93,0,0,87,88,5,66,
        0,0,88,89,5,79,0,0,89,90,5,79,0,0,90,91,5,76,0,0,91,92,5,91,0,0,
        92,94,5,93,0,0,93,57,1,0,0,0,93,60,1,0,0,0,93,64,1,0,0,0,93,67,1,
        0,0,0,93,71,1,0,0,0,93,76,1,0,0,0,93,82,1,0,0,0,93,87,1,0,0,0,94,
        2,1,0,0,0,95,96,5,60,0,0,96,97,5,45,0,0,97,4,1,0,0,0,98,99,7,0,0,
        0,99,6,1,0,0,0,100,109,5,61,0,0,101,102,5,33,0,0,102,109,5,61,0,
        0,103,109,7,1,0,0,104,105,5,60,0,0,105,109,5,61,0,0,106,107,5,62,
        0,0,107,109,5,61,0,0,108,100,1,0,0,0,108,101,1,0,0,0,108,103,1,0,
        0,0,108,104,1,0,0,0,108,106,1,0,0,0,109,8,1,0,0,0,110,111,5,38,0,
        0,111,115,5,38,0,0,112,113,5,124,0,0,113,115,5,124,0,0,114,110,1,
        0,0,0,114,112,1,0,0,0,115,10,1,0,0,0,116,117,5,40,0,0,117,12,1,0,
        0,0,118,119,5,41,0,0,119,14,1,0,0,0,120,124,7,2,0,0,121,123,7,3,
        0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,
        0,0,125,16,1,0,0,0,126,124,1,0,0,0,127,128,5,59,0,0,128,18,1,0,0,
        0,129,131,7,4,0,0,130,129,1,0,0,0,130,131,1,0,0,0,131,133,1,0,0,
        0,132,134,7,5,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,
        0,135,136,1,0,0,0,136,20,1,0,0,0,137,139,7,4,0,0,138,140,7,5,0,0,
        139,138,1,0,0,0,140,141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,
        142,143,1,0,0,0,143,145,5,46,0,0,144,146,7,5,0,0,145,144,1,0,0,0,
        146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,22,1,0,0,0,149,
        151,7,6,0,0,150,149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,
        153,1,0,0,0,153,154,1,0,0,0,154,155,6,11,0,0,155,24,1,0,0,0,156,
        157,5,82,0,0,157,158,5,69,0,0,158,159,5,65,0,0,159,160,5,68,0,0,
        160,26,1,0,0,0,161,162,5,87,0,0,162,163,5,82,0,0,163,164,5,73,0,
        0,164,165,5,84,0,0,165,166,5,69,0,0,166,28,1,0,0,0,167,168,5,73,
        0,0,168,169,5,70,0,0,169,30,1,0,0,0,170,171,5,69,0,0,171,172,5,76,
        0,0,172,173,5,83,0,0,173,174,5,69,0,0,174,32,1,0,0,0,175,176,5,87,
        0,0,176,177,5,72,0,0,177,178,5,73,0,0,178,179,5,76,0,0,179,180,5,
        69,0,0,180,34,1,0,0,0,181,182,5,84,0,0,182,183,5,82,0,0,183,184,
        5,85,0,0,184,191,5,69,0,0,185,186,5,70,0,0,186,187,5,65,0,0,187,
        188,5,76,0,0,188,189,5,83,0,0,189,191,5,69,0,0,190,181,1,0,0,0,190,
        185,1,0,0,0,191,36,1,0,0,0,192,196,5,34,0,0,193,195,9,0,0,0,194,
        193,1,0,0,0,195,198,1,0,0,0,196,197,1,0,0,0,196,194,1,0,0,0,197,
        199,1,0,0,0,198,196,1,0,0,0,199,200,5,34,0,0,200,38,1,0,0,0,201,
        202,5,70,0,0,202,203,5,85,0,0,203,204,5,78,0,0,204,205,5,67,0,0,
        205,40,1,0,0,0,206,207,5,123,0,0,207,42,1,0,0,0,208,209,5,125,0,
        0,209,44,1,0,0,0,210,211,5,91,0,0,211,46,1,0,0,0,212,213,5,93,0,
        0,213,48,1,0,0,0,214,215,5,82,0,0,215,216,5,69,0,0,216,217,5,84,
        0,0,217,218,5,85,0,0,218,219,5,82,0,0,219,220,5,78,0,0,220,50,1,
        0,0,0,221,222,5,44,0,0,222,52,1,0,0,0,223,224,5,47,0,0,224,225,5,
        47,0,0,225,229,1,0,0,0,226,228,9,0,0,0,227,226,1,0,0,0,228,231,1,
        0,0,0,229,230,1,0,0,0,229,227,1,0,0,0,230,232,1,0,0,0,231,229,1,
        0,0,0,232,233,5,10,0,0,233,234,1,0,0,0,234,235,6,26,0,0,235,54,1,
        0,0,0,236,237,9,0,0,0,237,56,1,0,0,0,13,0,93,108,114,124,130,135,
        141,147,152,190,196,229,1,6,0,0
    ]

class RedstoneLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TIPO = 1
    ATR = 2
    OPAR = 3
    OPREL = 4
    OPLOG = 5
    OPENPAR = 6
    CLOSEPAR = 7
    ID = 8
    FF = 9
    NUMINT = 10
    NUMREAL = 11
    WS = 12
    READ = 13
    WRITE = 14
    IF = 15
    ELSE = 16
    WHILE = 17
    BOOLEAN = 18
    STR = 19
    FUNCTION = 20
    OPENBRACES = 21
    CLOSEBRACES = 22
    OPENBRACKETS = 23
    CLOSEBRACKETS = 24
    RETURN = 25
    COMMA = 26
    COMMENT = 27
    ERROR = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<-'", "'('", "')'", "';'", "'READ'", "'WRITE'", "'IF'", "'ELSE'", 
            "'WHILE'", "'FUNC'", "'{'", "'}'", "'['", "']'", "'RETURN'", 
            "','" ]

    symbolicNames = [ "<INVALID>",
            "TIPO", "ATR", "OPAR", "OPREL", "OPLOG", "OPENPAR", "CLOSEPAR", 
            "ID", "FF", "NUMINT", "NUMREAL", "WS", "READ", "WRITE", "IF", 
            "ELSE", "WHILE", "BOOLEAN", "STR", "FUNCTION", "OPENBRACES", 
            "CLOSEBRACES", "OPENBRACKETS", "CLOSEBRACKETS", "RETURN", "COMMA", 
            "COMMENT", "ERROR" ]

    ruleNames = [ "TIPO", "ATR", "OPAR", "OPREL", "OPLOG", "OPENPAR", "CLOSEPAR", 
                  "ID", "FF", "NUMINT", "NUMREAL", "WS", "READ", "WRITE", 
                  "IF", "ELSE", "WHILE", "BOOLEAN", "STR", "FUNCTION", "OPENBRACES", 
                  "CLOSEBRACES", "OPENBRACKETS", "CLOSEBRACKETS", "RETURN", 
                  "COMMA", "COMMENT", "ERROR" ]

    grammarFileName = "Redstone.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


